#include <gdt.h>
#include <idt.h>
#include <fatal.h>
#include <paging.h>
#include <video.h>
#include <mischdr.h>
#include <string.h>
#include <console.h>
#include <keyboard.h>
#include <serial.h>
#include <initrd.h>
#include <memory.h>
#include <windowmanager.h>
#include <math.h>
#include <physallocator.h>
#include <multitasking.h>
#include <syscalls.h>
#include <shell.h>
#include <mouse.h>
#include <timer.h>
#include <cpuid.h>
#include <bitmap.h>
#include <snake.h>
#include <rpg.h>
#include <paint.h>
//#include "kernel.h"

#include <hal.h>

extern uint32_t physalloc_used_blocks;
cpuid_info_t cpuid_info;

int ram_amount;

extern "C"
void kmain(uint32_t mb_info_addr) {
	multiboot_info_t mb_info = *((multiboot_info_t*)mb_info_addr);

	HAL::initialize_all(mb_info);

	/*// Initialize serial port for debugging
	init_serial();
	write_serial_string("Initializing Lemon...\r\n");
	
	// Initialize GDT and IDT
	gdt_initialize();
	idt_initialize();

	mb_info = *((multiboot_info_t*)mb_info_addr);
	multiboot_module_t resources_module = *((multiboot_module_t*)mb_info.modsAddr);

	// Initialize Paging
	write_serial_string("Setting Up Paging...\r\n");
	paging_initialize();

	map_page(mb_info.mmapAddr, mb_info.mmapAddr, mb_info.mmapLength / PAGE_SIZE + 1);
	multiboot_memory_map_t* memory_map = (multiboot_memory_map_t*)mb_info.mmapAddr;

	memory_info_t mem_info;
	ram_amount = mem_info.memory_high = mb_info.memoryHi;
	mem_info.memory_low = mb_info.memoryLo;
	mem_info.mem_map = memory_map;
	mem_info.memory_map_len = mb_info.mmapLength;

	//Initialize Physical Page Allocator
	physalloc_init(&mem_info);

	// Map Video Memory
	write_serial_string("Initializing Video Mode\r\n");
	uint32_t vid_mem_size = mb_info.framebufferHeight*mb_info.framebufferPitch;

	map_page(mb_info.framebufferAddr, mb_info.framebufferAddr, vid_mem_size / PAGE_SIZE + 1);
	physalloc_mark_region_used(mb_info.framebufferAddr, vid_mem_size);
	physalloc_mark_region_used(resources_module.mod_start, resources_module.mod_end - resources_module.mod_start);

	// Initialize Video Mode structure
	video_mode_t video_mode;

	video_mode.width = mb_info.framebufferWidth;
	video_mode.height = mb_info.framebufferHeight;
	video_mode.bpp = mb_info.framebufferBpp;
	video_mode.pitch = mb_info.framebufferPitch;
	video_mode.address = mb_info.framebufferAddr;
	video_mode.type = Graphical;*/

	//video_initialize(video_mode);

	cpuid_info = cpuid_get_info();

	memory_info_t mem_info = HAL::mem_info;
	video_mode_t video_mode = HAL::video_mode;

	// Initialize Graphics Driver
	if (mb_info.modsCount < 1) {
		fatal_error("The initrd was not passed in boot config", "NO_INITRD"); // Send an error message if the initrd was not passed in boot config
	}
	else if (mem_info.memory_high + mem_info.memory_low < 24000) fatal_error("Not enough memory! (< 24MB)", "ERR_NOT_ENOUGH_MEM"); // Throw a fatal if there isnt enough memory at the moment 24MB is demanded as the minimum
	else if (!(cpuid_info.features_edx & CPUID_EDX_SSE2)) fatal_error("CPU does not support SSE2", "ERR_NO_SSE2");

	if(strcmp((char*)mb_info.cmdline,"kshell") == 0){
		Console kshell_console = Console(0,0,video_mode.width, video_mode.height);
		kshell_console.puts("Lemon Kernel Shell, type 'cmds' to list all shell commands");
		Shell sh(&kshell_console);
		keyboard_install();
		for(;;){
			sh.Update();
			kshell_console.refresh();
			screen_update();
		}
		return;
	}

	/*bitmap_t splashscreen{
		*((bitmap_file_header_t*)resources_module.mod_start),
		*((bitmap_info_header_t*)resources_module.mod_start + sizeof(bitmap_file_header_t)),
		(void*)(resources_module.mod_start+54)
	};
	void* splashscreen_bmp = (void*)(resources_module.mod_start);
	void* progress_bmp = (void*)(resources_module.mod_start + 0x8cd66);
	void* field_bmp = (void*)(resources_module.mod_start + 0x8d99c);

	bitmap_file_header_t bmpfileheader = *((bitmap_file_header_t*)splashscreen_bmp);
	bitmap_info_header_t bmpinfoheader = *((bitmap_info_header_t*)splashscreen_bmp + sizeof(bitmap_file_header_t));
	bitmap_file_header_t bmpfileheader2 = *((bitmap_file_header_t*)progress_bmp);
	bitmap_info_header_t bmpinfoheader2 = *((bitmap_info_header_t*)progress_bmp + sizeof(bitmap_file_header_t));
	bitmap_file_header_t bmpfileheader3 = *((bitmap_file_header_t*)field_bmp);
	bitmap_info_header_t bmpinfoheader3 = *((bitmap_info_header_t*)field_bmp + sizeof(bitmap_file_header_t));
	screen_clear(0, 0, 0);
	/*drawbitmap_noscale(video_mode.width / 2 - 260, video_mode.height / 2 - 250, 525, 366, (uint8_t*)(splashscreen_bmp + 54), 24);
	screen_update();

	syscalls_init();

	//for (int i = 0; i < 5; i++) screen_update(); // Loading Bars are nice

	drawbitmap_noscale(video_mode.width / 2 - 32 * 2, video_mode.height / 2 + 250, 32, 32, (uint8_t*)(progress_bmp + 54), 24);
	screen_update();

	keyboard_install();
	mouse_install();

	//for (int i = 0; i < 5; i++) screen_update(); // Loading Bars are nice

	drawbitmap_noscale(video_mode.width / 2 - 32 * 1, video_mode.height / 2 + 250, 32, 32, (uint8_t*)(progress_bmp + 54), 24);
	screen_update();

	timer_install();

	//for (int i = 0; i < 5; i++) screen_update(); // Loading Bars are nice

	drawbitmap_noscale(video_mode.width / 2, video_mode.height / 2 + 250, 32, 32, (uint8_t*)(progress_bmp + 54), 24);
	screen_update();

	//WindowManager win_mgr(&video_mode); // Initialize Window Manager

	drawbitmap_noscale(video_mode.width / 2 + 32 * 1, video_mode.height / 2 + 250, 32, 32, (uint8_t*)(progress_bmp + 54), 24);
	screen_update();*/

	screen_clear(96, 192, 192);
	screen_update();

	multitasking_init();
	//timer_install();

	for(;;);
}